<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init vars

acc = 2;
accrun = 4;
hsp = 0;
vsp = 0;
jumpspeed = 22;
movespeed = 15;
moverunspeed = 24;

fric = 2;
air_fric = 0.5;

canMove = false;

jtime = 0;
time = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gamepad

xaxis = 0;

show_debug_message(gamepad_is_connected(0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite

time++;
if (time &gt; 15) {
    canMove = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement &amp; Jumping
if (!canMove) return 0;

//Get the player's input
key_right = keyboard_check(vk_right) || keyboard_check(ord("D"));
key_left = keyboard_check(vk_left) || keyboard_check(ord("A"));
key_jump = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0, gp_face1);
key_jump_held = keyboard_check(vk_space) || gamepad_button_check_released(0, gp_face1);
key_run = keyboard_check(vk_shift) || gamepad_button_check(0, gp_face3);

//React to inputs

if (gamepad_is_connected(0)) {
    scr_get_gamepad_input(0);
}

if (key_right) {
    if (!key_run) {
        if (hsp &lt; movespeed) {
          hsp = round(hsp);
          hsp += acc;
        }
    }
    if (key_run) {
        if (hsp &lt; moverunspeed) {
            hsp = round(hsp);
            hsp += accrun;
        }
    }
}
if (key_left) {
    if (!key_run) {
        if (hsp &gt; -movespeed) {
          hsp = round(hsp);
          hsp -= acc;
        }
    }
    if (key_run) {
        if (hsp &gt; -moverunspeed) {
            hsp = round(hsp);
            hsp -= accrun;
        }
    }
}

if (!key_run) {
    hsp += xaxis * acc;
}
if (key_run) {
    hsp += xaxis * accrun;
}

if (place_meeting(x+1,y,obj_wall) || place_meeting(x-1,y,obj_wall)) {
    if (vsp &lt; 30) vsp += obj_game.GRAVITY / 1.55;
} else {
    if (vsp &lt; 30) vsp += obj_game.GRAVITY;
}

if (!place_meeting(x,y+1,obj_wall)) {
    if (hsp &gt; 0) {
        hsp = round(hsp);
        hsp -= air_fric;
    }
    if (hsp &lt; 0) {
        hsp = round(hsp);
        hsp += air_fric;
    }
} else if (!key_left &amp;&amp; !key_right) {
    if (hsp &gt; 0) {
        hsp = round(hsp);
        hsp -= fric;
    }
    if (hsp &lt; 0) {
        hsp = round(hsp);
        hsp += fric;
    }
    if (hsp &gt; -accrun &amp;&amp; hsp &lt; accrun) hsp = 0;
}

if (!place_meeting(x,y+1,obj_wall) &amp;&amp; place_meeting(xprevious-hsp, yprevious+1, obj_wall)) {
    jtime = 8;
}

if (jtime &gt; 0) {
    jtime--;
    if (vsp &gt;= 0 &amp;&amp; key_jump) {
        vsp = -jumpspeed;
        jtime = 0;
    }
}

if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -jumpspeed;
}

if (vsp &lt; 0 &amp;&amp; !key_jump_held) {
    vsp = max(vsp, 0);
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Safe
if (y &gt; room_height * 1.1) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wall Jumping

if (!canMove) return 0;

if (place_free(x,y+1)) {
    if ((key_jump) &amp;&amp; (place_meeting(x+2,y,obj_wall))) {
        if (key_left) {
            vsp = -jumpspeed;
            hsp -= movespeed;
        }
        else if (key_right) {
            vsp = -jumpspeed;
            if (key_run) {
                hsp -= movespeed * 2.5;
            } else {
                hsp -= movespeed * 1.5;
            }
        }
        else {
            vsp = -jumpspeed;
            hsp -= 20;
        }
    }
    if ((key_jump) &amp;&amp; (place_meeting(x-2,y,obj_wall))) &amp;&amp; !place_meeting(x,y+1,obj_wall) {
        if (key_left) {
            vsp = -jumpspeed;
            if (key_run) {
                hsp += movespeed * 2.5;
            } else {
                hsp += movespeed * 1.5;
            }
        }
        else if (key_right) {
            vsp = -jumpspeed;
            hsp += movespeed;
        }
        else {
            vsp = -jumpspeed;
            hsp += 20;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spikes

if (place_meeting(x,y,obj_spike)) {
    x = xstart;
    y = ystart;
    acc = 2;
    accrun = 4;
    hsp = 0;
    vsp = 0;
    jumpspeed = 22;
    movespeed = 15;
    moverunspeed = 24;
    
    fric = 2;
    air_fric = 0.6;
    
    canMove = false;
    
    jtime = 0;
    time = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
